export ZSH=${HOME}/.oh-my-zsh

ZSH_THEME="devpod"
export POWERLINE_NO_SHELL_PROMPT=1

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
HIST_STAMPS="yyyy-mm-dd"

source $ZSH/oh-my-zsh.sh

export EDITOR=vim
export UBER_OWNER="bean@uber.com"
export UBER_LDAP_UID="bean"
export KUBECONFIG="$HOME/.kube/uconfig"

######## Alias Section ############################

alias af='arc flow'

alias bhd="bazel run //src/code.uber.internal/infra/bhd/cmd/cli --"
alias massrem="bazel run //src/code.uber.internal/infra/hostissues/cmd/massremediation --"
# Bazel
alias bshow="bazel query 'kind(rule, ...)' --output label_kind"
alias mtest='gazelle && bazel test //src/code.uber.internal/infra/metal/...'
alias sgg='~/go-code/config/infra/starlark/scripts/stargen.sh'
alias bpit='bazel build --platforms //:linux_amd64 //src/code.uber.internal/infra/metal/pitstop/cmd:pitstop'

display_error() {
    echo "‚ùå \033[31mERROR:\033[0m $1" >&2
    return 1
}

fr() {
    rg -l "$1" | xargs perl -p -i -e "s#$1#$2#g"
}

histo() {
   sort | uniq -c | sort -r
}
###################################################


crun() {
  local more_dirs="$@"
  local add_dir_flags=""
  
  for dir in $more_dirs; do
    add_dir_flags+=" --add-dir=$dir"
  done

  if ! aifx agent run claude -c $add_dir_flags; then
    # Retry without -c (continue) flag for fresh session.
    aifx agent run claude $add_dir_flags
  fi
}

gsnb() {
  if [ $# -eq 0 ]; then
    display_error "Usage: gspnew <branch title sentence>"
    return 1
  fi

  local title="$*"

  # Convert title ‚Üí safe branch name
  local branch_name
  branch_name=$(echo "$title" \
    | tr '[:upper:]' '[:lower:]' \
    | sed -E 's/[^a-z]+/-/g; s/^-+|-+$//g')

  local current_branch
  current_branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null) || {
    display_error "Not in a git repository."
    return 1
  }

  echo "üì¶ Creating branch '\033[32m$branch_name\033[0m' from '\033[36m$current_branch\033[0m' with git-spice..."
  if ! gs branch create "$branch_name" -m "$title"; then
    display_error "Failed to create branch with git-spice."
    return 1
  fi

  # Set upstream to the branch we created from (local tracking)
  if ! git branch --set-upstream-to="$current_branch" "$branch_name" >/dev/null 2>&1; then
    display_error "Failed to set local upstream to '$current_branch'."
    return 1
  fi

  echo "‚úÖ \033[32mCreated branch '$branch_name' (title: \"$title\")\033[0m"
  echo "üîó \033[36mLocal upstream set to '$current_branch'\033[0m"
}

arc-setup() {
  local arcrc="$HOME/.arcrc"
    
  # Check if .arcrc exists and has a token
  if [[ -f "$arcrc" ]]; then
    if jq -e '.hosts | to_entries[] | select(.value.token != null and .value.token != "")' "$arcrc" >/dev/null 2>&1; then
      echo "‚úÖ Arc certificate already installed"
      return 0
    fi
  fi

  echo "üîë Arc certificate not found or invalid. Installing..."
  if arc install-certificate; then
    echo "‚úÖ Arc certificate installed successfully"
  else
    echo "‚ùå Failed to install arc certificate"
    return 1
  fi
}

devsetup() {
    #  run arc to get cert. (its used by phab mcp)
    arc-setup

    # first install things.
    /home/user/bean-worksetup/devpod/flavors/claude/install-claude-code.sh
}

# installed with apt
# auto-jump plugin - "j <dir>"
[ -f /usr/share/autojump/autojump.sh ] && . /usr/share/autojump/autojump.sh

path=(/usr/local/sbin /usr/local/bin $path)

echo -e "`date +"%Y-%m-%d %H:%M:%S"` direnv hooking zsh"
eval "$(direnv hook zsh)"
eval "$(gs shell completion zsh)"

autoload bashcompinit
bashcompinit

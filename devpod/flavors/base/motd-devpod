#!/bin/bash

# Source our environment - this contains all our configuration
source /etc/profile.d/50-bean.sh 2>/dev/null || true

# Colors
cyan="\e[1;36m"
blue="\e[1;34m"
green="\e[1;32m"
red="\e[1;31m"
yellow="\e[1;33m"
grey="\e[90m"
reset="\e[0m"

parse_devpod_log() {
    local log_file="/home/user/.devpod/logs/devpod.yaml.log"

    if [[ ! -f "$log_file" ]]; then
        echo "no_log"
        return
    fi

    # Find the most recent execution start
    local latest_start=$(tac "$log_file" | while read -r line; do
        if echo "$line" | jq -e '.msg | test("Devpod-yaml executor is launching")' >/dev/null 2>&1; then
            echo "$line" | jq -r '.ts'
            break
        fi
    done)

    if [[ -z "$latest_start" ]]; then
        echo "no_execution"
        return
    fi

    # Get all lines from the latest execution
    local latest_lines=$(awk -v start="$latest_start" '
        {
            if (match($0, /"ts":"([^"]*)"/, ts_match)) {
                if (ts_match[1] >= start) {
                    print $0
                }
            }
        }
    ' "$log_file")

    # Check for fatal failures
    local failed_line=$(echo "$latest_lines" | while read -r line; do
        if echo "$line" | jq -e '.msg | test("fatal: \\[localhost\\]: FAILED")' >/dev/null 2>&1; then
            echo "$line"
            break
        fi
    done)

    if [[ -n "$failed_line" ]]; then
        local timestamp=$(echo "$failed_line" | jq -r '.ts')
        echo "0|0|0|1|0|$timestamp"
        return
    fi

    # Look for PLAY RECAP
    local recap_line=$(echo "$latest_lines" | while read -r line; do
        if echo "$line" | jq -e '.msg | test("localhost.*: ok=")' >/dev/null 2>&1; then
            echo "$line"
            break
        fi
    done)

    if [[ -z "$recap_line" ]]; then
        echo "no_recap"
        return
    fi

    # Extract stats using jq and regex
    local msg=$(echo "$recap_line" | jq -r '.msg')
    local ok=$(echo "$msg" | grep -o 'ok=[0-9]*' | cut -d= -f2)
    local changed=$(echo "$msg" | grep -o 'changed=[0-9]*' | cut -d= -f2)
    local unreachable=$(echo "$msg" | grep -o 'unreachable=[0-9]*' | cut -d= -f2)
    local failed=$(echo "$msg" | grep -o 'failed=[0-9]*' | cut -d= -f2)
    local skipped=$(echo "$msg" | grep -o 'skipped=[0-9]*' | cut -d= -f2)
    local timestamp=$(echo "$recap_line" | jq -r '.ts')

    echo "$ok|$changed|$unreachable|$failed|$skipped|$timestamp"
}

get_failed_tasks() {
    local log_file="/home/user/.devpod/logs/devpod.yaml.log"

    if [[ ! -f "$log_file" ]]; then
        return
    fi

    # Find the most recent execution start
    local latest_start=$(tac "$log_file" | while read -r line; do
        if echo "$line" | jq -e '.msg | test("Devpod-yaml executor is launching")' >/dev/null 2>&1; then
            echo "$line" | jq -r '.ts'
            break
        fi
    done)

    if [[ -z "$latest_start" ]]; then
        return
    fi

    # Get failed task messages from the latest execution
    awk -v start="$latest_start" '
        {
            if (match($0, /"ts":"([^"]*)"/, ts_match)) {
                if (ts_match[1] >= start) {
                    print $0
                }
            }
        }
    ' "$log_file" | while read -r line; do
        if echo "$line" | jq -e '.msg | test("FAILED|UNREACHABLE|fatal:")' >/dev/null 2>&1; then
            echo "$line" | jq -r '.msg' | head -c 60
            echo
        fi
    done | head -3
}

format_time_ago() {
    local timestamp="$1"

    if [[ -z "$timestamp" ]]; then
        echo "unknown"
        return
    fi

    # Convert ISO timestamp to epoch
    local then=$(date -d "$timestamp" +%s 2>/dev/null || echo "0")
    local now=$(date +%s)
    local diff=$((now - then))

    if [[ $diff -lt 60 ]]; then
        echo "${diff}s ago"
    elif [[ $diff -lt 3600 ]]; then
        echo "$((diff / 60))m ago"
    elif [[ $diff -lt 86400 ]]; then
        echo "$((diff / 3600))h ago"
    else
        echo "$((diff / 86400))d ago"
    fi
}

devpod_ansible_status() {
    local stats=$(parse_devpod_log)

    echo ""
    echo -e "‚öôÔ∏è ${cyan}Ansible Status$reset"

    if [[ "$stats" == "no_log" ]]; then
        echo -e "   ${grey}No log found$reset"
        return
    elif [[ "$stats" == "no_recap" ]]; then
        echo -e "   ${yellow}‚ö†Ô∏è No summary found$reset"
        return
    fi

    IFS='|' read -r ok changed unreachable failed skipped timestamp <<< "$stats"
    local time_ago=$(format_time_ago "$timestamp")

    if [[ "$failed" -gt 0 || "$unreachable" -gt 0 ]]; then
        echo -e "   ${red}‚ùå FAILED$reset ${grey}($time_ago)$reset"
        [[ "$failed" -gt 0 ]] && echo -e "   ${red}Failed: $failed$reset"
    else
        echo -e "   ${green}‚úÖ SUCCESS$reset ${grey}($time_ago)$reset"
    fi
}

get_devpod_flavor() {
    echo "${BEAN_DEVPOD_FLAVOR:-unknown}"
}

flavor_info() {
    local flavor=$(get_devpod_flavor)
    echo -e "ü§ñ ${cyan}DevPod:$reset $flavor"
}

# Show devpod configuration
show_devpod_config() {
    echo ""
    echo -e "üîß ${cyan}DevPod Configuration$reset"
    echo -e "   BEAN_INFRA_BASE_PATH=${BEAN_INFRA_BASE_PATH:-${yellow}<not set>$reset}"
    echo -e "   BEAN_SEARCH_DEPTH=${BEAN_SEARCH_DEPTH:-${yellow}<not set>$reset}"
    
    # Show top autojump directories if available
    if command -v autojump >/dev/null 2>&1; then
        echo ""
        echo -e "üìä ${cyan}Top Autojump Directories$reset"
        autojump -s | tail -7 2>/dev/null | while read -r line; do
            if [[ "$line" =~ ^[0-9]+\.[0-9]+: ]]; then
                echo -e "   ${grey}$line$reset"
            fi
        done || echo -e "   ${grey}(no autojump data)$reset"
    fi
}

# Always show Ansible status
devpod_ansible_status

# Show flavor information
flavor_info

# Show configuration
show_devpod_config